linux文件系统(VFS)中，每个目录项都有一个dentry结构相对应，定义于include/linux/dcache.h
struct dentry {
 /* RCU lookup touched fields */
 unsigned int d_flags; /* protected by d_lock */
 seqcount_t d_seq; /* per dentry seqlock */
 struct hlist_bl_node d_hash; /* lookup hash list */
 struct dentry *d_parent; /* parent directory */
 struct qstr d_name;
 struct inode *d_inode; /* Where the name belongs to - NULL is
  * negative */
 unsigned char d_iname[DNAME_INLINE_LEN]; /* small names */

 /* Ref lookup also touches following */
 unsigned int d_count; /* protected by d_lock */
 spinlock_t d_lock; /* per dentry lock */
 const struct dentry_operations *d_op;
 struct super_block *d_sb; /* The root of the dentry tree */
 unsigned long d_time; /* used by d_revalidate */
 void *d_fsdata; /* fs-specific data */

 struct list_head d_lru; /* LRU list */
 /*
  * d_child and d_rcu can share memory
  */
 union {
 struct list_head d_child; /* child of parent list */
   struct rcu_head d_rcu;
 } d_u;
 struct list_head d_subdirs; /* our children */
 struct hlist_node d_alias; /* inode alias list */
};
其中，struct qstr d_name;结构是相应目录项的name，包括其hash值：
struct qstr {
 union {
 struct {
 HASH_LEN_DECLARE;
 };
 u64 hash_len;
 };
 const unsigned char *name;
};
同时，在fs/dcache.c中，定义了一个hash数组：
static struct hlist_bl_head *dentry_hashtable __read_mostly;
并定义了将一个dentry结构加入dentry_hashtable的方法：
void d_rehash(struct dentry * entry)
{
 spin_lock(&entry->d_lock);
 _d_rehash(entry);
 spin_unlock(&entry->d_lock);
}
EXPORT_SYMBOL(d_rehash);
static void _d_rehash(struct dentry * entry)
{
 __d_rehash(entry, d_hash(entry->d_parent, entry->d_name.hash));
}
static void __d_rehash(struct dentry * entry, struct hlist_bl_head *b)
{
 BUG_ON(!d_unhashed(entry));
 hlist_bl_lock(b);
 entry->d_flags |= DCACHE_RCUACCESS;
 hlist_bl_add_head_rcu(&entry->d_hash, b);
 hlist_bl_unlock(b);
}
