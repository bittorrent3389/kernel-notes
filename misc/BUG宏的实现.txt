1. BUG()的实现
x86里，BUG()定义于arch/x86/include/asm/bug.h：

#ifdef CONFIG_DEBUG_BUGVERBOSE

#ifdef CONFIG_X86_32
# define __BUG_C0    "2:\t.long 1b, %c0\n"
#else
# define __BUG_C0    "2:\t.long 1b - 2b, %c0 - 2b\n"
#endif

#define BUG()                            \
do {                                \
    asm volatile("1:\tud2\n"                \
             ".pushsection __bug_table,\"a\"\n"        \
             __BUG_C0                    \
             "\t.word %c1, 0\n"                \
             "\t.org 2b+%c2\n"                \
             ".popsection"                \
             : : "i" (__FILE__), "i" (__LINE__),    \
             "i" (sizeof(struct bug_entry)));        \
    unreachable();                        \
} while (0)

#else
#define BUG()                            \
do {                                \
    asm volatile("ud2");                    \
    unreachable();                        \
} while (0)
#endif

    可以看出，在启用CONFIG_DEBUG_BUGVERBOSE时，每个对BUG()的使用都会在__bug_table
段里放入一个struct bug_entry结构，这个结构定义于include/asm-generic/bug.h：

#ifdef CONFIG_GENERIC_BUG
struct bug_entry {
#ifndef CONFIG_GENERIC_BUG_RELATIVE_POINTERS
    unsigned long    bug_addr;
#else
    signed int    bug_addr_disp;
#endif
#ifdef CONFIG_DEBUG_BUGVERBOSE
#ifndef CONFIG_GENERIC_BUG_RELATIVE_POINTERS
    const char    *file;
#else
    signed int    file_disp;
#endif
    unsigned short    line;
#endif
    unsigned short    flags;
};
#endif    /* CONFIG_GENERIC_BUG */
    从BUG()的定义来看，结构bug_entry的几个field分别被设置成了指令“ud2”的地址（标号1处）（这个和下一个源文件名在重定位后会保存重定位后的地址）、代码源文件文件名指针（__FILE__）、行号（__LINE__）、0（对应flags域）。

    由于"ud2"是一个非法指令，会引发cpu的invalid opcode exception，其处理函数为arch/x86/kernel/entry_32.S中的invalid_op，其会调用do_invalid_op，这是又是在文件arch/x86/kernel/traps.c中由宏定义
#define DO_ERROR_INFO根据
DO_ERROR_INFO(X86_TRAP_UD,     SIGILL,  "invalid opcode", invalid_op,ILL_ILLOPN, regs->ip )
来生成的，它主要调用do_trap函数：
do_trap->do_trap_no_signal:

    if (!user_mode(regs)) {
        if (!fixup_exception(regs)) {
            tsk->thread.error_code = error_code;
            tsk->thread.trap_nr = trapnr;
            die(str, regs, error_code);
        }
        return 0;
    }
    所以如果没有找到fixup就会die()结构当前进程，而BUG()里的"ud2"指令恰恰是没有fixup的（BUG()里是
__bug_table段而不是__ex_table段）。
    而在die()中，就会通过
die()
    |
report_bug()        lib/bug.c
    |__find_bug()
    |__printk()

    通过find_bug()在kernel及module中找到相应的bug_entry结构，进而找到发生bug的文件及行号打印出来：

const struct bug_entry *find_bug(unsigned long bugaddr)
{
    const struct bug_entry *bug;

    for (bug = __start___bug_table; bug < __stop___bug_table; ++bug)
        if (bugaddr == bug_addr(bug))
            return bug;

    return module_find_bug(bugaddr);
}

2. .pushsection与.popsection
    我觉得这两个directive与.section和.previous用途相同，只是.popsection后恢复原来的section，所以下面
.pushsection aaa
    xxx
    .pushsection bbb
    .popsection
    yyy
.popsection
应该与下面相同
.section aaa
    xxx
    yyy
.previous
.section bbb
.previous
    详见Using as, P55, 7.61 .pushsection name

3. .long与.word
.long expressions与.int 相同：
    Expect zero or more expressions, of any section, separated by commas. For each expression,
emit a number that, at run time, is the value of that expression.
    也就是说在段内生成expression重定位后的值，对应BUG()的情况 ，就是生成重定位后标号1b的地址和重定位后文件名__FILE__字符串的地址（在.rodata段中）。

.word expressions
    This directive expects zero or more expressions, of any section, separated by commas.
The size of the number emitted, and its byte order, depend on what target computer
the assembly is for.
    也就是说生成一个number，对应BUG()的情况 ，就是生成行号__LINE__和0（用来填充bug_table结构的
flags域）。

参考：

http://kernelnewbies.org/FAQ/BUG

kpatch中对.rela__bug_table处理时的描述：
https://github.com/dynup/kpatch/blob/master/kpatch-build/create-diff-object.c#L977

 * The format of section __bug_table is a table of struct bug_entry.  Each
 * bug_entry has three fields:
 * - relocated address of instruction pointer at BUG
 * - relocated address of string with filename
 * - line number of the BUG
