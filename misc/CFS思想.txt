CFS试图抽像出一个“理想多任务处理器”，在这个理想的处理器上，任务是完全并发的，
即任务能在无限小的时间内切换。

这样，如果不考虑各任务的优先级，各个任务分配到的cpu时间（处理能力）是相同的，
都是1/n（如果有n个cpu），调度时只要挑选分配的cpu时间最少的进程就行了。

如果考虑了各任务优先级，则概念上要保证每个进程的vruntime是相等的，每个进程的vruntime
相当于自己的虚拟时钟，每个进程的vruntime是其真实运行时间考虑了其权值后换算得到的
（delta_exec*NICE_0_LOAD/curr->load.weight），所以实际上每个进程的真实运行时间不同，与其优先级有关。

理想情况下，vruntime应该等于系统实际运行时间的1/n，但实际上的实现是各进程的vrumtime相互追赶，
vruntime不一定非要应该等于系统实际运行时间的1/n。实际上，为了计算方便，设定nice值为０的进程的vruntime和
其真实经过的物理时间相等（其虚拟时钟与真实时钟速度相等），其它进程按其权值与nice进程的比例，
统一到这个上来（delta_exec*NICE_0_LOAD/curr->load.weight），可以看出，优先级越大也就是说权值越大的进程，
其虚拟时钟越慢。

在”完美多任务处理器”上，各进程按照其各自权值比例运行，各进程的vruntime值永远是相等的，也就不需要vruntime，
实际的处理器则需要记录每个进程的这个值来做平衡。所以实际运行中只要挑选vrumtime值最小的进程即可。
