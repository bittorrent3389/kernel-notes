访问某内存地址时，汇编指令接受的是虚拟地址，如mov指令。然后cpu硬件通过页面目录、页表自动将虚拟地址映射成物理地址。这个过程如果失败（比如当页面目录项和页表项中P标准位位0，目标页面不在内存中时），则cpu硬件触发缺页异常，进而执行do_page_fault。
从内核中的异常处理程序返回后，cpu会重新执行产生异常的程序（如mov)，重新进行虚拟地址到物理地址的映射。
do_page_fault中，发生异常的目标地址可能没有映射，也可能有映射但被换出到交换区，
如果是没有映射：
如果是从用户空间访问目标地址，则想当前进程发送SIGSEGV
如果是从系统空间访问目标地址（如copy_from_user)，则执行相应的fixup代码。
如果有映射但页面被交换到交换区，这时要分配内存页面并把交换区中的页面读进来，这个过程可能睡眠，所以do_page_fault，进而copy_from_user可能睡眠。
异常是一种exceptional control flow，从另一个角度来说是一种硬件提供的简化代码和代码复用的手段。

x86 page fault处理流程：
arch/x86/kernel/entry_32.S
page_fault-->do_page_fault

arch/x86/mm/fault.c
do_page_fault()-->__do_page_fault()-->handle_mm_fault()
mm/memory.c
handle_mm_fault()-->handle_pte_fault()-->do_linear_fault()-->__do_fault()
-->vma->vm_ops->fault(vma, &vmf);
可以看出对缺页的处理（分配物理页、读磁盘等）是通过vm_operations_struct 结构里的fault函数来完成的。
（以前是nopage函数）。
对于驱动程序可以在vm_operations_struct 结构里实现相应的nopage函数，并在mmap时设置相应的
vma->vm_ops：(如ldd3-samples/simple/simple.c)
/* Device 1 uses nopage */
static struct file_operations simple_nopage_ops = {
       .mmap    = simple_nopage_mmap,
};
static int simple_nopage_mmap(struct file *filp, struct vm_area_struct *vma)
{
         ... ...
         vma->vm_ops = &simple_nopage_vm_ops;
         simple_vma_open(vma);
         return 0;
}
static struct vm_operations_struct simple_nopage_vm_ops = {
         .nopage = simple_vma_nopage,
};
struct page *simple_vma_nopage(struct vm_area_struct *vma,
                unsigned long address, int *type)
{
         struct page *pageptr;
         unsigned long offset = vma->vm_pgoff << PAGE_SHIFT;
         unsigned long physaddr = address - vma->vm_start + offset;
         unsigned long pageframe = physaddr >> PAGE_SHIFT;

         if (!pfn_valid(pageframe))
         return NOPAGE_SIGBUS;
         pageptr = pfn_to_page(pageframe);
         get_page(pageptr);
         if (type)
                 *type = VM_FAULT_MINOR;
         return pageptr;
}

对于普通文件，也有相应的fault函数，使得mmap()区间的内存被换回到文件后，能再次从文件中读回来：
fs/ext4/file.c
static int ext4_file_mmap(struct file *file, struct vm_area_struct *vma)
{
         struct address_space *mapping = file->f_mapping;

         if (!mapping->a_ops->readpage)
                 return -ENOEXEC;
         file_accessed(file);
         vma->vm_ops = &ext4_file_vm_ops;
         return 0;
}
static const struct vm_operations_struct ext4_file_vm_ops = {
         .fault = filemap_fault,
};
filemap_fault定义于mm/filemap.c，调用了readpage来获取页面。

inode中的文件buffer既可以用于read和write操作的缓冲，也可以在这里实现mmap－将文件内容映射到虚拟内存。

这里是换出的一种情况，即mmap的内存区，换出到所属的文件。第二种情况，就是swapper space的换出：
read和write操作本身不涉及虚存映射，所以没有换出问题。但用户空间里的一些空间，比如为了保存read读进来的数据而分配的一些空间（malloc）、栈空间等，应该会被换出到swapper space，具体对就哪些区域，还要进一些研究？？？
