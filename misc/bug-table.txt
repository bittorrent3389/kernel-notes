	当启用了CONFIG_DEBUG_BUGVERBOSE，并使用了BUG()或BUG_ON()宏的话，
就会在生成的目标文件里生成__bug_table段，此段的内容实际是结构
struct bug_table数组：

	#ifdef CONFIG_GENERIC_BUG
	struct bug_entry {
	#ifndef CONFIG_GENERIC_BUG_RELATIVE_POINTERS
	    unsigned long    bug_addr;
	#else
	    signed int    bug_addr_disp;
	#endif
	#ifdef CONFIG_DEBUG_BUGVERBOSE
	#ifndef CONFIG_GENERIC_BUG_RELATIVE_POINTERS
	    const char    *file;
	#else
	    signed int    file_disp;
	#endif
	    unsigned short    line;
	#endif
	    unsigned short    flags;
	};
	#endif    /* CONFIG_GENERIC_BUG */

	每使用次此宏，就会在此段里生成一个bug_entry结构。结构里
第一个域是对BUG()宏地址（实际是第一条指令ud2的地址）的引用，这个
域要需要链接后重定位；第二个域file是对BUG()宏所在源文件名字符串
地址的引用，这个地址在链接后也需要重定位。
	所以，在段__bug_table的重定位段.rel__bug_table里，对于每个
struct bug_entry结构都有两个重定位项。

没使用-ffunction-sections和-fdata-sections的情况
===============================================
	以文件kernel/trace/trace_stack.c为例，这里使用了一个BUG_ON()
宏，在正常编译的情况下（不使用-ffunction-sections和-fdata-sections的情况下）
生成kernel/trace/trace_stack.o

$ objdump -j __bug_table -s kernel/trace/trace_stack.o
Contents of section __bug_table:
 0000 b9060000 6e000000 c8000000           ....n.......  

$ readelf -r kernel/trace/trace_stack.o
Relocation section '.rel__bug_table' at offset 0x1eba8 contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 00000000  00000201 R_386_32          00000000   .text
 00000004  00000801 R_386_32          00000000   .rodata.str1.1

	可以看出重定位表中两个重定位入口是针对符号'.text'和'.rodata.str1.1'
的重定位（因为要重定位的目标即结构bug_table中的两个域是数据对象，并没有对应
的符号），这可以通过两个符号在符号表中的下标2和8来验证。而Offset中的0和4则
表示两个重定位入口所要修正的位置的第一个字节相对于段__bug_table起始的偏移。

	而存储在要修正位置的两个值000006b9和0000006e实际上是addend，重定位
时将.text和.rodata.str1.1的实际地址（重定位后的地址）与两个addend相加，就得到
了两个要修正位置的最终值。

	可以通过反汇编看到__bug_table里两个要修正位置的addend正是BUG()中指令
'ud2'在.text段及文件名‘kernel/trace/trace_stack.c’在.rodata.str1.1段中的偏移：

$ objdump -j .text -d kernel/trace/trace_stack.o
	68c:	c7 04 24 f8 01 00 00 	movl   $0x1f8,(%esp)
	693:	e8 fc ff ff ff       	call   694 <stack_trace_call+0x2c4>
	698:	64 a1 00 00 00 00    	mov    %fs:0x0,%eax
	69e:	3d 00 00 00 00       	cmp    $0x0,%eax
	6a3:	0f 84 de fd ff ff    	je     487 <stack_trace_call+0xb7>
	6a9:	8b 40 04             	mov    0x4(%eax),%eax
	6ac:	81 78 44 9d 6e ac 57 	cmpl   $0x57ac6e9d,0x44(%eax)
	6b3:	0f 84 ce fd ff ff    	je     487 <stack_trace_call+0xb7>
	[6b9]:	0f 0b                	ud2   


$ objdump -j .rodata.str1.1 -s kernel/trace/trace_stack.o
	Contents of section .rodata.str1.1:
	 0000 5f66696c 7465723d 00737461 636b5f6d  _filter=.stack_m
	 0010 61785f73 697a6500 73746163 6b5f7472  ax_size.stack_tr
	 0020 61636500 73746163 6b5f7472 6163655f  ace.stack_trace_
	 0030 66696c74 65720025 6c640a00 25336c64  filter.%ld..%3ld
	 0040 29202538 64202020 25356420 20200025  ) %8d   %5d   .%
	 0050 70530a00 2564202d 2066756e 633a2570  pS..%d - func:%p
	 0060 53202d20 696e6465 783a2575 0a006b65  S - index:%u..ke
	 0070 726e656c 2f747261 63652f74 72616365  rnel/trace/trace
	 0080 5f737461 636b2e63 00                 _stack.c.

使用-ffunction-sections和-fdata-sections的情况
==============================================
重新编译trace_tack.o:
$ KCFLAGS="-ffunction-sections -fdata-sections" make kernel/trace/trace_stack.o

$ objdump -j __bug_table -s kernel/trace/trace_stack.o
Contents of section __bug_table:
 0000 32020000 54000000 ac000000           2...T.......

$ readelf -r kernel/trace/trace_stack.o
Relocation section '.rel__bug_table' at offset 0x1f08c contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
00000000  00002c01 R_386_32          00000000   .text.stack_trace_call
00000004  00000901 R_386_32          00000000   .rodata.str1.1
	可以看到因为使用了-ffunction-sections来编译，每个函数被放在了单独
的段里，所以重定位入口通过符号.text.stack_trace_call来进行重定位。进而重定位
位置上保存的addend也变成了针对段.text.stack_trace_call的偏移00000232:

 21c:	0f 84 8e fe ff ff    	je     b0 <stack_trace_call+0xb0>
 222:	8b 40 04             	mov    0x4(%eax),%eax
 225:	81 78 44 9d 6e ac 57 	cmpl   $0x57ac6e9d,0x44(%eax)
 22c:	0f 84 7e fe ff ff    	je     b0 <stack_trace_call+0xb0>
 232:	0f 0b                	ud2    

kpatch
======
在kpatch里的rela->sym本来是段符号，如.text.stack_trace_call，但是在
kpatch_replace_sections_syms()里通过rela->sym = rela->sym->sec->sym;
被替换成了段里的主函数符号，如stack_trace_call

kpatch里函数kpatch_replace_sections_syms()及注释

	/*
	 * Mangle the relas a little.  The compiler will sometimes
	 * use section symbols to reference local objects and functions
	 * rather than the object or function symbols themselves.
	 * We substitute the object/function symbols for the section
	 * symbol in this case so that the existing object/function
	 * in vmlinux can be linked to.
	 */
的含义是有时编译器会使用段符号来引用本地对象或本地函数，比如trace_stack.c中：
(这里的情况是函数在独立的段里的情况)

static struct ftrace_ops trace_ops __read_mostly =
{
	.func = stack_trace_call,
	.flags = FTRACE_OPS_FL_RECURSION_SAFE,
};

	包含了对stack_trace_call的引用，而因为使用了-ffunction-sections选项，
所以trace_ops单独放在了段.data..read_mostly里，并会生成一个.rel.data..read_mostly
段。(不知为何不是.data..trace_ops段)但是
$ readelf -r kernel/trace/trace_stack.o|less

Relocation section '.rel.data..read_mostly' at offset 0x1f194 contains 1
entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 00000000  00002c01 R_386_32          00000000   .text.stack_trace_call
	也就是说编译器使用段符号.text.stack_trace_call来引用函数
stack_trace_call（函数stack_trace_call单独存在于段.text.stack_trace_call中）。
	
	同样，stack_trace_filter_open里包含对trace_ops的引用：
static int
stack_trace_filter_open(struct inode *inode, struct file *file)
{
	return ftrace_regex_open(&trace_ops, FTRACE_ITER_FILTER,
				 inode, file);
}
	而$ readelf -r kernel/trace/trace_stack.o|less:
Relocation section '.rel.text.stack_trace_filter_open' at offset 0x1ec5c
contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 0000000c  00003e01 R_386_32          00000000   .data..read_mostly
 00000016  00005902 R_386_PC32        00000000   ftrace_regex_open
	可以看到实际使用的却是段符号.data..read_mostly来引用read_mostly。
而read_mostly在stack_trace_filter_open要修正位置的偏移为0000000c，而
$ objdump -j .text.stack_trace_filter_open -d kernel/trace/trace_stack.o
可以看到0000000c位置的addend为0，这与read_mostly在.data..read_mostly里的偏移
为0是对应的：
Disassembly of section .text.stack_trace_filter_open:

00000000 <stack_trace_filter_open>:
0:	55                   	push   %ebp
1:	89 c1                	mov    %eax,%ecx
3:	89 e5                	mov    %esp,%ebp
5:	83 ec 04             	sub    $0x4,%esp
8:	89 14 24             	mov    %edx,(%esp)
b:	b8 00 00 00 00       	mov    $0x0,%eax
10:	ba 01 00 00 00       	mov    $0x1,%edx
15:	e8 fc ff ff ff       	call   16 <stack_trace_filter_open+0x16>
1a:	c9                   	leave  
1b:	c3                   	ret    


使用段符号来引用局部符号(引用两个局部数据)：
使用了两个trace_ops也是生成了一个.data..read_mostly段，只是在段内的偏移不同而已：
$ KCFLAGS="-ffunction-sections -fdata-sections" make kernel/trace/trace_stack.o
===============================================================================

//---------------------------------
static struct ftrace_ops trace_ops __read_mostly =
{
	.func = stack_trace_call,
	.flags = FTRACE_OPS_FL_RECURSION_SAFE,
};
static struct ftrace_ops trace_ops1 __read_mostly =
{
	.func = stack_trace_call1,
	.flags = FTRACE_OPS_FL_RECURSION_SAFE,
};
static int
stack_trace_filter_open(struct inode *inode, struct file *file)
{
	ftrace_regex_open(&trace_ops, FTRACE_ITER_FILTER,
				 inode, file);
	return ftrace_regex_open(&trace_ops1, FTRACE_ITER_FILTER,
				 inode, file);
}
//---------------------------------

Relocation section '.rel.text.stack_trace_filter_open' at offset 0x1febc contains
4 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
 0000000f  00004301 R_386_32          00000000   .data..read_mostly
 0000001c  00005e02 R_386_PC32        00000000   ftrace_regex_open
 0000002b  00004301 R_386_32          00000000   .data..read_mostly
 00000030  00005e02 R_386_PC32        00000000   ftrace_regex_open


00000000 <stack_trace_filter_open>:
0:	55                   	push   %ebp
1:	89 c1                	mov    %eax,%ecx
3:	89 e5                	mov    %esp,%ebp
5:	56                   	push   %esi
6:	89 d6                	mov    %edx,%esi
8:	53                   	push   %ebx
9:	89 c3                	mov    %eax,%ebx
b:	83 ec 04             	sub    $0x4,%esp
e:	b8 [40 00 00 00]       	mov    $0x40,%eax	//偏移为0x40，引用的是trace_ops
13:	89 14 24             	mov    %edx,(%esp)
16:	ba 01 00 00 00       	mov    $0x1,%edx
1b:	e8 fc ff ff ff       	call   1c <stack_trace_filter_open+0x1c>
20:	89 d9                	mov    %ebx,%ecx
22:	ba 01 00 00 00       	mov    $0x1,%edx
27:	89 34 24             	mov    %esi,(%esp)
2a:	b8 [00 00 00 00]       	mov    $0x0,%eax	//偏移为0x0,引用的是trace_ops1
2f:	e8 fc ff ff ff       	call   30 <stack_trace_filter_open+0x30>
34:	83 c4 04		add    $0x4,%esp
37:	5b			pop    %ebx
38:	5e			pop    %esi
39:	5d			pop    %ebp
3a:	c3			ret    
						     
$ objdump -s -j .data..read_mostly kernel/trace/trace_stack.o
Contents of section .data..read_mostly:
0000 00000000 00000000 40000000 00000000  ........@.......
0010 00000000 00000000 00000000 00000000  ................
0020 00000000 00000000 00000000 00000000  ................
0030 00000000 00000000 00000000 00000000  ................
0040 00000000 00000000 40000000 00000000  ........@.......
0050 00000000 00000000 00000000 00000000  ................
0060 00000000 00000000 00000000 00000000  ................
0070 00000000                             .... 

使用段符号来引用局部符号(引用两个局部函数，并且两个局部函数在同一个段里的情况)：
$ make kernel/trace/trace_stack.o
===============================================================================
.data..read_mostly里引用了stack_trace_call和stack_trace_call1两个函数，都是通过
.text来引用：
$ objdump -r kernel/trace/trace_stack.o|less 
RELOCATION RECORDS FOR [.data..read_mostly]:
OFFSET   TYPE              VALUE 
00000000 R_386_32          .text
00000040 R_386_32          .text

$ objdump -s -j .data..read_mostly kernel/trace/trace_stack.o
Contents of section .data..read_mostly:
0000 a0060000 00000000 40000000 00000000  ........@.......
0010 00000000 00000000 00000000 00000000  ................
0020 00000000 00000000 00000000 00000000  ................
0030 00000000 00000000 00000000 00000000  ................
0040 f0010000 00000000 40000000 00000000  ........@.......
0050 00000000 00000000 00000000 00000000  ................
0060 00000000 00000000 00000000 00000000  ................
0070 00000000                             ....    

其中000006a0和000001f0分别是stack_trace_call1和stack_trace_call在.text中的偏移。

还有这里面的有两个偏移，但上面的那个.data..read_mostly的dump里0和40位置上
stack_trace_call1和stack_trace_call的偏移却都为0，这是因为这里两个函数都放在了
.text段里，所以有不同的偏移，但上面的情况里两个函数都放在了各自独立的段里了，所以
偏移都为0。
