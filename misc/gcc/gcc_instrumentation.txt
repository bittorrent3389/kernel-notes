1. instrumentation
        instrumentation是除mcount之外的gcc的另一个profile功能，在编译文件时只要使用
-finstrument-functions参数，就可以在每个函数的进入后和退出前调用函数
__cyg_profile_func_enter和__cyg_profile_func_exit，man gcc:

-finstrument-functions
           Generate instrumentation calls for entry and exit to functions.  Just after function entry and just before
           function exit, the following profiling functions are called with the address of the current function and
           its call site.  (On some platforms, "__builtin_return_address" does not work beyond the current function,
           so the call site information may not be available to the profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the current function, which may be looked up exactly
	   in the symbol table.

           This instrumentation is also done for functions expanded inline in other functions.  The profiling
	   calls indicate where, conceptually, the inline function is entered and exited.  This means that
	   addressable versions of such functions must be available.  If all your uses of a function are expanded
	   inline, this may mean an additional expansion of code size.  If you use extern inline in your C code,
	   an addressable version of such functions must be provided.  (This is normally the case anyway, but if
	   you get lucky and the optimizer always expands the functions inline, you might have gotten away without
	   providing static copies.)

           A function may be given the attribute "no_instrument_function", in which case this instrumentation is
	   not done.  This can be used, for example, for the profiling functions listed above, high-priority
	   interrupt routines, and any functions from which the profiling functions cannot safely be called 
	   (perhaps signal handlers, if the profiling routines generate output or allocate memory).

    一个函数可以指定no_instrument_function来不产生instrumentation call，比如进入和退出函数就一定要使用这个属性，
否则会循环instrument，产生死循环：
					
void __cyg_profile_func_enter( void *, void * )  
 __attribute__ ((no_instrument_function)); 
  
void __cyg_profile_func_exit( void *, void * ) 
 __attribute__ ((no_instrument_function)); 
2. Constructor, Destructor
        还有两个有用的属性是constructor和desructor，来实现在main函数之前和之后调用的函数，比如：
								
void main_constructor( void ) 
 __attribute__ ((no_instrument_function, constructor)); 
  
void main_destructor( void ) 
 __attribute__ ((no_instrument_function, destructor)); 
        下面是gcc文档的说明:
constructor
destructor
constructor (priority)
destructor (priority)
The constructor attribute causes the function to be called automatically before execution enters main ().
Similarly, the destructor attribute causes the function to be called automatically after main () completes
or exit () is called. Functions with these attributes are useful for initializing data that is used implicitly
during the execution of the program.
You may provide an optional integer priority to control the order in which constructor and destructor
functions are run. A constructor with a smaller priority number runs before a constructor with a larger
priority number; the opposite relationship holds for destructors. So, if you have a constructor that allocates
a resource and a destructor that deallocates the same resource, both functions typically have the same priority.
The priorities for constructor and destructor functions are the same as those specified for namespace-scope C++
objects (see C++ Attributes).

3. Linux kernel里对gcc instrumentation的使用
        在include/linux/compiler.h里有定义
#define notrace __attribute__((no_instrument_function))
        这样，就可以使用来ontrace修饰函数，使其关闭instrumentation，比如：
arch/arm/kernel/stacktrace.c
void notrace walk_stackframe()
        所以这个notrace与关闭ftrace无关，要关闭ftrace还得使用
CFLAGS_REMOVE_dumpstack_32.o = -pg这样方法。

Ref:
[1] GCC Function Instrumentation
[2] 巧用Graphviz和pvtrace等工具可视化C函数调用
[3] GCC doc:6.30 Declaring Attributes of Functions
