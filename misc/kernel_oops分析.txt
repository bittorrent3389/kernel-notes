    如果一个模块创建了debugfs文件，但模块卸载前没有通过    void debugfs_remove 或
debugfs_remove_recursive移除相应的文件，当再次访问模块里的数据时，就会报错，比如cat
一个已删除的文件时，首先要先打开相应的文件，在finish_open-->do_dentry_open里要通过inode->i_fop
访问模块里定义的file_operations结构里的内容。虽然模块已被卸载，相应的file_operations结构已经不存在，
但inode->i_fop未被清空，仍然存在，但根据fops_get的定义：

#define fops_get(fops) \
 (((fops) && try_module_get((fops)->owner) ? (fops) : NULL))

    使用fops->owner调用try_module_get 时就会出错，因为fops指向的内存已经不能访问，这可以从下面的oops信息里看出：

[13015.981907] BUG: unable to handle kernel paging request at d1287200
[13015.981907] IP: [<c1154679>] do_dentry_open+0x79/0x250
[13015.981907] *pde = 0eed5067 *pte = 00000000 
[13015.981907] Oops: 0000 [#4] PREEMPT SMP 
[13015.981907] Modules linked in: snd_intel8x0 snd_ac97_codec ac97_bus snd_pcm joydev snd_page_alloc
snd_timer ppdev snd microcode psmouse evdev serio_raw pcspkr intel_agp mousedev intel_gtt e1000 i2c_piix4
agpgart soundcore parport_pc i2c_core parport ac button ext4 crc16 mbcache jbd2 hid_generic usbhid hid
sr_mod cdrom sd_mod ata_generic pata_acpi atkbd libps2 ohci_pci ohci_hcd ata_piix ahci libahci libata usbcore
usb_common scsi_mod i8042 serio [last unloaded: hello]
[13015.981907] CPU: 0 PID: 27260 Comm: cat Tainted: G      D    O 3.13.0-ARCH #2
[13015.981907] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
[13015.981907] task: cee15640 ti: cfa30000 task.ti: cfa30000
[13015.981907] EIP: 0060:[<c1154679>] EFLAGS: 00010286 CPU: 0
[13015.981907] EIP is at do_dentry_open+0x79/0x250
[13015.981907] EAX: d1287200 EBX: cee01b40 ECX: 00000031 EDX: c9fc9390
[13015.981907] ESI: c9fc92c0 EDI: 00008000 EBP: cfa31e28 ESP: cfa31e08
[13015.981907]  DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
[13015.981907] CR0: 80050033 CR2: d1287200 CR3: 0fba6000 CR4: 000006d0
[13015.981907] DR0: 00000000 DR1: 00000000 DR2: 00000000 DR3: 00000000
[13015.981907] DR6: 00000000 DR7: 00000000
[13015.981907] Stack:
[13015.981907]  00008000 c9fc92c0 00000000 cee01b48 ceb1f180 cfa31ec8 00000000 00008000
[13015.981907]  cfa31e38 c1154bcb cfa31efc cee01b40 cfa31e90 c1162952 cfa31ec8 c1160365
[13015.981907]  cfa31e78 c11427be cee15640 00000000 cfa31efc 00000040 cee01b40 00000024
[13015.981907] Call Trace:
[13015.981907]  [<c1154bcb>] finish_open+0x2b/0x40
[13015.981907]  [<c1162952>] do_last+0x532/0xd70
[13015.981907]  [<c1160365>] ? link_path_walk+0x1c5/0x700
[13015.981907]  [<c11427be>] ? kmem_cache_alloc+0x1be/0x1e0
[13015.981907]  [<c1163240>] path_openat+0xb0/0x5f0
[13015.981907]  [<c1164621>] do_filp_open+0x31/0x80
[13015.981907]  [<c1155d41>] do_sys_open+0x121/0x220
[13015.981907]  [<c1155e62>] SyS_open+0x22/0x30
[13015.981907]  [<c14557a3>] syscall_call+0x7/0xb
[13015.981907] Code: 89 73 10 a8 02 0f 85 4f 01 00 00 8b 56 20 f6 c4 40 89 93 88 00 00 00 0f 85 b3
01 00 00 8b 86 c8 00 00 00 85 c0 0f 84 c7 00 00 00 <8b> 00 e8 d0 9e f5 ff 84 c0 0f 84 b8 00 00 00
8b 86 c8 00 00 00
[13015.981907] EIP: [<c1154679>] do_dentry_open+0x79/0x250 SS:ESP 0068:cfa31e08
[13015.981907] CR2: 00000000d1287200
[13015.981907] ---[ end trace 290d0036f343c60b ]---

    因为是在函数do_dentry_open里出错，所以在栈上向上找call trace时会找到do_dentry_open的返回地址，
即finish_open+0x2b/0x40处，或虚拟地址<c1154bcb>处，通过objdump -S vmlinux得到的反汇编代码得知，
这个地址正是在finish_open中调用do_dentry_open的返回地址 ，即其下一条指令的地址：

c1154600 <do_dentry_open>:
c1154600: 55                    push   %ebp
c1154601: 89 e5                 mov    %esp,%ebp
c1154603: 57                    push   %edi
c1154604: 56                    push   %esi
c1154605: 53                    push   %ebx
c1154606: 83 ec 14              sub    $0x14,%esp
c1154609: e8 a6 7b 30 00        call   c145c1b4 <mcount>
c115460e: 89 55 e8              mov    %edx,-0x18(%ebp)
c1154611: 8b 50 20              mov    0x20(%eax),%edx
c1154614: 89 c3                 mov    %eax,%ebx
c1154616: 89 4d f0              mov    %ecx,-0x10(%ebp)
c1154619: 89 d0                 mov    %edx,%eax
c115461b: 25 00 00 00 01        and    $0x1000000,%eax
c1154620: 8d 4a 01              lea    0x1(%edx),%ecx
c1154623: 83 c8 1c              or     $0x1c,%eax
c1154626: 83 e1 03              and    $0x3,%ecx
c1154629: 09 c8                 or     %ecx,%eax
c115462b: 81 e2 00 00 20 00     and    $0x200000,%edx
c1154631: 89 43 24              mov    %eax,0x24(%ebx)
c1154634: 0f 85 f2 01 00 00     jne    c115482c <do_dentry_open+0x22c>
c115463a: 8d 43 08              lea    0x8(%ebx),%eax
c115463d: 89 45 ec              mov    %eax,-0x14(%ebp)
c1154640: e8 ab a3 00 00        call   c115e9f0 <path_get>
c1154645: 8b 43 0c              mov    0xc(%ebx),%eax
c1154648: 8b 70 20              mov    0x20(%eax),%esi
c115464b: 8b 43 24              mov    0x24(%ebx),%eax
c115464e: 89 73 10              mov    %esi,0x10(%ebx)
c1154651: a8 02                 test   $0x2,%al
c1154653: 0f 85 4f 01 00 00     jne    c11547a8 <do_dentry_open+0x1a8>
c1154659: 8b 56 20              mov    0x20(%esi),%edx
c115465c: f6 c4 40              test   $0x40,%ah
c115465f: 89 93 88 00 00 00     mov    %edx,0x88(%ebx)
c1154665: 0f 85 b3 01 00 00     jne    c115481e <do_dentry_open+0x21e>
c115466b: 8b 86 c8 00 00 00     mov    0xc8(%esi),%eax
c1154671: 85 c0                 test   %eax,%eax
c1154673: 0f 84 c7 00 00 00     je     c1154740 <do_dentry_open+0x140>
c1154679: 8b 00                 mov    (%eax),%eax
c115467b: e8 d0 9e f5 ff        call   c10ae550 <try_module_get>
c1154680: 84 c0                 test   %al,%al
c1154682: 0f 84 b8 00 00 00     je     c1154740 <do_dentry_open+0x140>
c1154688: 8b 86 c8 00 00 00     mov    0xc8(%esi),%eax
c115468e: 85 c0                 test   %eax,%eax
c1154690: 89 43 14              mov    %eax,0x14(%ebx)
c1154693: 0f 84 ae 00 00 00     je     c1154747 <do_dentry_open+0x147>
c1154699: 8b 55 f0              mov    -0x10(%ebp),%edx
c115469c: 89 d8                 mov    %ebx,%eax
c115469e: e8 ed 2e 08 00        call   c11d7590 <security_file_open>
c11546a3: 85 c0                 test   %eax,%eax
c11546a5: 89 c7                 mov    %eax,%edi
c11546a7: 75 27                 jne    c11546d0 <do_dentry_open+0xd0>
c11546a9: 8b 86 cc 00 00 00     mov    0xcc(%esi),%eax
c11546af: 8b 53 20              mov    0x20(%ebx),%edx
c11546b2: 85 c0                 test   %eax,%eax
c11546b4: 0f 84 a6 00 00 00     je     c1154760 <do_dentry_open+0x160>
c11546ba: b9 20 00 00 00        mov    $0x20,%ecx
c11546bf: 89 f0                 mov    %esi,%eax
c11546c1: e8 ea 69 04 00        call   c119b0b0 <__break_lease>
c11546c6: 85 c0                 test   %eax,%eax
c11546c8: 89 c7                 mov    %eax,%edi
c11546ca: 0f 84 90 00 00 00     je     c1154760 <do_dentry_open+0x160>
c11546d0: 8b 43 14              mov    0x14(%ebx),%eax
c11546d3: 85 c0                 test   %eax,%eax
c11546d5: 74 07                 je     c11546de <do_dentry_open+0xde>
c11546d7: 8b 00                 mov    (%eax),%eax
c11546d9: e8 42 9f f5 ff        call   c10ae620 <module_put>
c11546de: f6 43 24 02           testb  $0x2,0x24(%ebx)
c11546e2: 74 34                 je     c1154718 <do_dentry_open+0x118>
c11546e4: f0 ff 8e c4 00 00 00  lock decl 0xc4(%esi)
c11546eb: 0f b7 06              movzwl (%esi),%eax
c11546ee: 89 c1                 mov    %eax,%ecx
c11546f0: 66 81 e1 00 b0        and    $0xb000,%cx
c11546f5: 66 81 f9 00 20        cmp    $0x2000,%cx
c11546fa: 74 1c                 je     c1154718 <do_dentry_open+0x118>
c11546fc: 66 25 00 f0           and    $0xf000,%ax
c1154700: 66 3d 00 10           cmp    $0x1000,%ax
c1154704: 74 12                 je     c1154718 <do_dentry_open+0x118>
c1154706: 66 3d 00 c0           cmp    $0xc000,%ax
c115470a: 74 0c                 je     c1154718 <do_dentry_open+0x118>
c115470c: 8b 43 08              mov    0x8(%ebx),%eax
c115470f: e8 dc ce 01 00        call   c11715f0 <__mnt_drop_write>
c1154714: 8d 74 26 00           lea    0x0(%esi,%eiz,1),%esi
c1154718: 8b 45 ec              mov    -0x14(%ebp),%eax
c115471b: e8 40 a3 00 00        call   c115ea60 <path_put>
c1154720: 89 f8                 mov    %edi,%eax
c1154722: c7 43 08 00 00 00 00  movl   $0x0,0x8(%ebx)
c1154729: c7 43 0c 00 00 00 00  movl   $0x0,0xc(%ebx)
c1154730: c7 43 10 00 00 00 00  movl   $0x0,0x10(%ebx)
c1154737: 83 c4 14              add    $0x14,%esp
c115473a: 5b                    pop    %ebx
c115473b: 5e                    pop    %esi
c115473c: 5f                    pop    %edi
c115473d: 5d                    pop    %ebp
c115473e: c3                    ret    
c115473f: 90                    nop
c1154740: c7 43 14 00 00 00 00  movl   $0x0,0x14(%ebx)
c1154747: ba c5 02 00 00        mov    $0x2c5,%edx
c115474c: b8 67 49 53 c1        mov    $0xc1534967,%eax
c1154751: e8 0a 1c ef ff        call   c1046360 <warn_slowpath_null>
c1154756: bf ed ff ff ff        mov    $0xffffffed,%edi
c115475b: e9 70 ff ff ff        jmp    c11546d0 <do_dentry_open+0xd0>
c1154760: 8b 7d e8              mov    -0x18(%ebp),%edi
c1154763: 85 ff                 test   %edi,%edi
c1154765: 0f 84 9d 00 00 00     je     c1154808 <do_dentry_open+0x208>
c115476b: 8b 7d e8              mov    -0x18(%ebp),%edi
c115476e: 89 da                 mov    %ebx,%edx
c1154770: 89 f0                 mov    %esi,%eax
c1154772: ff d7                 call   *%edi
c1154774: 85 c0                 test   %eax,%eax
c1154776: 89 c7                 mov    %eax,%edi
c1154778: 0f 85 52 ff ff ff     jne    c11546d0 <do_dentry_open+0xd0>
c115477e: 8b 83 88 00 00 00     mov    0x88(%ebx),%eax
c1154784: 81 63 20 3f fc ff ff  andl   $0xfffffc3f,0x20(%ebx)
c115478b: 8b 00                 mov    (%eax),%eax
c115478d: 8b 50 20              mov    0x20(%eax),%edx
c1154790: 8d 43 4c              lea    0x4c(%ebx),%eax
c1154793: e8 78 88 fb ff        call   c110d010 <file_ra_state_init>
c1154798: 31 c0                 xor    %eax,%eax
c115479a: 83 c4 14              add    $0x14,%esp
c115479d: 5b                    pop    %ebx
c115479e: 5e                    pop    %esi
c115479f: 5f                    pop    %edi
c11547a0: 5d                    pop    %ebp
c11547a1: c3                    ret    
c11547a2: 8d b6 00 00 00 00     lea    0x0(%esi),%esi
c11547a8: 8b 43 08              mov    0x8(%ebx),%eax
c11547ab: 31 d2                 xor    %edx,%edx
c11547ad: 8d 8e c4 00 00 00     lea    0xc4(%esi),%ecx
c11547b3: 89 45 e4              mov    %eax,-0x1c(%ebp)
c11547b6: 8d 7a 01              lea    0x1(%edx),%edi
c11547b9: 89 d0                 mov    %edx,%eax
c11547bb: f0 0f b1 39           lock cmpxchg %edi,(%ecx)
c11547bf: 39 c2                 cmp    %eax,%edx
c11547c1: 75 75                 jne    c1154838 <do_dentry_open+0x238>
c11547c3: 0f b7 06              movzwl (%esi),%eax
c11547c6: 89 c2                 mov    %eax,%edx
c11547c8: 66 81 e2 00 b0        and    $0xb000,%dx
c11547cd: 66 81 fa 00 20        cmp    $0x2000,%dx
c11547d2: 74 2c                 je     c1154800 <do_dentry_open+0x200>
c11547d4: 66 25 00 f0           and    $0xf000,%ax
c11547d8: 66 3d 00 10           cmp    $0x1000,%ax
c11547dc: 89 4d e0              mov    %ecx,-0x20(%ebp)
c11547df: 74 1f                 je     c1154800 <do_dentry_open+0x200>
c11547e1: 66 3d 00 c0           cmp    $0xc000,%ax
c11547e5: 74 19                 je     c1154800 <do_dentry_open+0x200>
c11547e7: 8b 45 e4              mov    -0x1c(%ebp),%eax
c11547ea: e8 a1 cc 01 00        call   c1171490 <__mnt_want_write>
c11547ef: 8b 4d e0              mov    -0x20(%ebp),%ecx
c11547f2: 85 c0                 test   %eax,%eax
c11547f4: 89 c7                 mov    %eax,%edi
c11547f6: 74 08                 je     c1154800 <do_dentry_open+0x200>
c11547f8: f0 ff 09              lock decl (%ecx)
c11547fb: e9 18 ff ff ff        jmp    c1154718 <do_dentry_open+0x118>
c1154800: 8b 43 24              mov    0x24(%ebx),%eax
c1154803: e9 51 fe ff ff        jmp    c1154659 <do_dentry_open+0x59>
c1154808: 8b 43 14              mov    0x14(%ebx),%eax
c115480b: 8b 40 2c              mov    0x2c(%eax),%eax
c115480e: 85 c0                 test   %eax,%eax
c1154810: 89 45 e8              mov    %eax,-0x18(%ebp)
c1154813: 0f 84 65 ff ff ff     je     c115477e <do_dentry_open+0x17e>
c1154819: e9 4d ff ff ff        jmp    c115476b <do_dentry_open+0x16b>
c115481e: c7 43 14 c0 a8 47 c1  movl   $0xc147a8c0,0x14(%ebx)
c1154825: 31 c0                 xor    %eax,%eax
c1154827: e9 0b ff ff ff        jmp    c1154737 <do_dentry_open+0x137>
c115482c: c7 43 24 00 40 00 00  movl   $0x4000,0x24(%ebx)
c1154833: e9 02 fe ff ff        jmp    c115463a <do_dentry_open+0x3a>
c1154838: 85 c0                 test   %eax,%eax
c115483a: 79 0a                 jns    c1154846 <do_dentry_open+0x246>
c115483c: bf e6 ff ff ff        mov    $0xffffffe6,%edi
c1154841: e9 d2 fe ff ff        jmp    c1154718 <do_dentry_open+0x118>
c1154846: 89 c2                 mov    %eax,%edx
c1154848: e9 69 ff ff ff        jmp    c11547b6 <do_dentry_open+0x1b6>
c115484d: 8d 76 00              lea    0x0(%esi),%esi

c1154ba0 <finish_open>:
c1154ba0: 55                    push   %ebp
c1154ba1: 89 e5                 mov    %esp,%ebp
c1154ba3: 56                    push   %esi
c1154ba4: 53                    push   %ebx
c1154ba5: e8 0a 76 30 00        call   c145c1b4 <mcount>
c1154baa: 8b 5d 08              mov    0x8(%ebp),%ebx
c1154bad: 89 ce                 mov    %ecx,%esi
c1154baf: f6 03 02              testb  $0x2,(%ebx)
c1154bb2: 75 22                 jne    c1154bd6 <finish_open+0x36>
c1154bb4: 89 50 0c              mov    %edx,0xc(%eax)
c1154bb7: 64 8b 15 94 46 6a c1  mov    %fs:0xc16a4694,%edx
c1154bbe: 8b 8a 20 03 00 00     mov    0x320(%edx),%ecx
c1154bc4: 89 f2                 mov    %esi,%edx
c1154bc6: e8 35 fa ff ff        call   c1154600 <do_dentry_open>
c1154bcb: 85 c0                 test   %eax,%eax
c1154bcd: 75 03                 jne    c1154bd2 <finish_open+0x32>
c1154bcf: 83 0b 02              orl    $0x2,(%ebx)
c1154bd2: 5b                    pop    %ebx
c1154bd3: 5e                    pop    %esi
c1154bd4: 5d                    pop    %ebp
c1154bd5: c3                    ret    
c1154bd6: 0f 0b                 ud2    
c1154bd8: 90                    nop
c1154bd9: 8d b4 26 00 00 00 00  lea    0x0(%esi,%eiz,1),%esi


    这只是找到了栈上的调用关系，要找到出错的位置，还得通过 EIP，通过 oops信息可知 ，
EIP is at do_dentry_open+0x79/0x250,并且EIP为<c1154679>,从上面反汇编 do_dentry_open的代码可知，
出错的指令为mov    (%eax),%eax,正好是在对call   c10ae550 <try_module_get>,的调用之前。
    另外，在oops信息中，显示了栈上的内容：

Stack:
 00008000 c9fc92c0 00000000 cee01b48 ceb1f180 cfa31ec8 00000000 00008000
 cfa31e38 c1154bcb cfa31efc cee01b40 cfa31e90 c1162952 cfa31ec8 c1160365
 cfa31e78 c11427be cee15640 00000000 cfa31efc 00000040 cee01b40 00000024
    可以看到除了有call trace中显示的返回函数地址外，还有一些其它值，实际是栈上的参数，桢指针等。
