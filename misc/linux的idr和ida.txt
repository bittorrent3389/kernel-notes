有关idr的使用见
http://lwn.net/Articles/103209/ 或
http://blog.chinaunix.net/uid-24774106-id-367804.html
=============================================

idr是一个“Small id to pointer translation service.”， 就是为数据结构分配一个id，建立这种映射。
在磁盘文件的块映射中，为了兼顾访问速度和容量，把inode中的i_data数组分成直接映射，一次间址，二次间址和三次间址。
而在idr中 , 则并没有这样的划分。而是根据要分配的id大小（要管理的数据结构的数量），动态伸展树的层次，
动态分配分支结点idr_layer，动态建立起这棵树，而要管理的数据结构永远作为叶子节点。

除根节点外，每个分支节点都在上层分支节点的struct idr_layer __rcu *ary[1<<IDR_BITS];数组中。
而要管理的数据结构指针则在转型为(struct idr_layer *)后，保存在最底层分支节点的ary数组里。
而在idr_find中，则根据uid，一层一层的从ary数组中找到对应的指针，并转为void *返回。

相关数据结构：
struct idr_layer {
 unsigned long   bitmap; /* A zero bit means "space here" */
 struct idr_layer __rcu *ary[1<<IDR_BITS];
 int    count;  /* When zero, we can release it */
 int    layer;  /* distance from leaf */
 struct rcu_head   rcu_head;
};

struct idr {
 struct idr_layer __rcu *top;
 struct idr_layer *id_free;
 int    layers; /* only valid without concurrent changes */
 int    id_free_cnt;
 spinlock_t   lock;
};

#if BITS_PER_LONG == 32
# define IDR_BITS 5

#define IDR_SIZE (1 << IDR_BITS)
#define IDR_MASK ((1 << IDR_BITS)-1)

#define MAX_ID_SHIFT (sizeof(int)*8 - 1)
#define MAX_ID_BIT (1U << MAX_ID_SHIFT)
#define MAX_ID_MASK (MAX_ID_BIT - 1)

/* Leave the possibility of an incomplete final layer */
#define MAX_LEVEL (MAX_ID_SHIFT + IDR_BITS - 1) / IDR_BITS

可见数组struct idr_layer __rcu *ary[1<<IDR_BITS];的大小为32，也就是说这棵树完全展开时是个32叉树，
高度可达MAX_LEVEL即7层。

当要管理的数据结构小于32个时idr结构top指向的根结点idr_layer中的arr数组中元素分别指向相应数据结构。
当数据结构个数或所要求id大于32个时，这棵树就要生长一个层次，并分配相应id对应的分支结点idr_layer结构了，
并且以后的数据结构都使用这一层次进行管理。

IDR提供的相应接口和数据结构在头文件include/linux/idr.h中:
... ...
/*
 * This is what we export.
 */

void *idr_find(struct idr *idp, int id);
int idr_pre_get(struct idr *idp, gfp_t gfp_mask);
int idr_get_new(struct idr *idp, void *ptr, int *id);
int idr_get_new_above(struct idr *idp, void *ptr, int starting_id, int *id);
int idr_for_each(struct idr *idp,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *idp, int *nextid);
void *idr_replace(struct idr *idp, void *ptr, int id);
void idr_remove(struct idr *idp, int id);
void idr_remove_all(struct idr *idp);
void idr_destroy(struct idr *idp);
void idr_init(struct idr *idp);
... ...

idr_pre_get
//idr_pre_get - reserve resources for idr allocation
int idr_pre_get(struct idr *idp, gfp_t gfp_mask)
{
 while (idp->id_free_cnt < IDR_FREE_MAX) {
  new = kmem_cache_zalloc(idr_layer_cache, gfp_mask);

  move_to_free_list(idp, new);
 }
 return 1;
}
EXPORT_SYMBOL(idr_pre_get);
保证idr的id_free队列中的IDR_FREE_MAX即14个idr_layer结构。

idr_get_new_above
从starting_id开始分配id并和ptr结合起来：
int idr_get_new_above(struct idr *idp, void *ptr, int starting_id, int *id)
{
 rv = idr_get_new_above_int(idp, ptr, starting_id);
        ... ...
}
EXPORT_SYMBOL(idr_get_new_above);

static int idr_get_new_above_int(struct idr *idp, void *ptr, int starting_id)
{
  //分配空闲id
 id = idr_get_empty_slot(idp, starting_id, pa);
 if (id >= 0) {
  //把ptr指针转型为(struct idr_layer *)后写到相应的idr_layer结构中ary数组对应的位置上
  rcu_assign_pointer(pa[0]->ary[id & IDR_MASK],
    (struct idr_layer *)ptr);
  pa[0]->count++;
  idr_mark_full(pa, id);
 }
}

static int idr_get_empty_slot(struct idr *idp, int starting_id,
         struct idr_layer **pa)
{
 build_up:
        //如果请求的id超过了当前的层数的树的叶子数量（id >= (1 << (layers*IDR_BITS))），则通过这个
        //while循环增加树的层数，如下图中增加对象3时，这里的循环用来分配idr_layer结构1。
 while ((layers < (MAX_LEVEL - 1)) && (id >= (1 << (layers*IDR_BITS)))) {
  layers++;
  if (!(new = get_from_free_list(idp))) {
                     .... ...
  }
  new->ary[0] = p;
  new->count = 1;
  new->layer = layers-1;
  if (p->bitmap == IDR_FULL)
   __set_bit(0, &new->bitmap);
  p = new;
 }
 rcu_assign_pointer(idp->top, p);
 idp->layers = layers;
        //找到具体的空闲位置，这个过程中可能还要分配中间结点，如下图中的idr_layer结构2。
 v = sub_alloc(idp, &id, pa);
 if (v == IDR_NEED_TO_GROW)
  goto build_up;
}

static int sub_alloc(struct idr *idp, int *starting_id, struct idr_layer **pa)
{
 id = *starting_id;
 restart:
 p = idp->top;
 l = idp->layers;
 pa[l--] = NULL;
 while (1) {
  /*
   * We run around this while until we reach the leaf node...
   */
  n = (id >> (IDR_BITS*l)) & IDR_MASK;
  bm = ~p->bitmap;
  m = find_next_bit(&bm, IDR_SIZE, n);
  if (m == IDR_SIZE) {
   /* no space available go back to previous layer. */
   l++;
   oid = id;
   id = (id | ((1 << (IDR_BITS * l)) - 1)) + 1;

   /* if already at the top layer, we need to grow */
   if (id >= 1 << (idp->layers * IDR_BITS)) {
    *starting_id = id;
    return IDR_NEED_TO_GROW;
   }
   p = pa[l];
   BUG_ON(!p);

   /* If we need to go up one layer, continue the
    * loop; otherwise, restart from the top.
    */
   sh = IDR_BITS * (l + 1);
   if (oid >> sh == id >> sh)
    continue;
   else
    goto restart;
  }
  if (m != n) {
   sh = IDR_BITS*l;
   id = ((id >> sh) ^ n ^ m) << sh;
  }
  if ((id >= MAX_ID_BIT) || (id < 0))
   return IDR_NOMORE_SPACE;
  if (l == 0)
   break;
  /*
   * Create the layer below if it is missing.
   */
  if (!p->ary[m]) {
   new = get_from_free_list(idp);
   if (!new)
    return -1;
   new->layer = l-1;
   rcu_assign_pointer(p->ary[m], new);
   p->count++;
  }
  pa[l--] = p;
  p = p->ary[m];
 }

 pa[l] = p;
 return id;
}


linux的idr和ida - jesse.w - ydfjgsdighwdhjtyiju
针对1－2层的情况，这里有几种情况（多层原理相同）：
假设这棵树中原来有一层（idp->layers＝1），且请求的id(starting_id)小于32，并且原来的对象少于32个，
那么不需要这里的while循环分配1号节点，直接通过sub_alloc找到空闲的位置。
假设这棵树中原来有一层（idp->layers＝1），且请求的id(starting_id)小于32，但原来的对象等于32个，
即当前idr_layer结构已满，这时虽不会通过while分配idr_layer结构，但到了sub_alloc里后会满足条件
m == IDR_SIZE而返回IDR_NEED_TO_GROW，根据调整后的starting_id重新build_up而分配1号节点。

假设这棵树原来有一层，但请求的id大于或等于32，这里要通过while分配1号结构。
然后到sub_alloc里后会分配2号结构并返回相应的空闲位置。

原来就有两层，请求id大于或等于32且小于1024，根据需要使用已有的或分配2号结构。
原来就有两层，请求id小于32,且第一个idr_layer结构的32个位置已满，这时在sub_alloc里n=0，m=1，m!=n会对id做出调整。
原来就有两层，请求id小于32，第一个idr_layer结构不满，但空闲位置小于请求id，这时
m == IDR_SIZE而通过id = (id | ((1 << (IDR_BITS * l)) - 1)) + 1;对id做出调整后continue或restart。

总之，从idr_get_empty_slot返回后，pa[0]中包含的是数据结构ptr要插入的idr_layer结构，pa[1],pa[2] ... ..
依次为其上层的idr_layer数据结构。

idr_find
//找出id对应的数据结构指针
void *idr_find(struct idr *idp, int id)
{
 p = rcu_dereference_raw(idp->top);
        //数据结构所在的idr_layer的layer为0，向树的根部方向递增，根结点的layer为层数减1。

        //某个层次的容量对应的bits为(layer+1)*IDR_BITS，容量为1<<n。
 n = (p->layer+1) * IDR_BITS;
        //如超出这棵树的总容量，return NULL;
 if (id >= (1 << n))
  return NULL;

 while (n > 0 && p) {
                //减去IDR_BITS得到下一层次的容量，即本层次中的数组ary中的一项对应的容量（bits）。
  n -= IDR_BITS;
  p = rcu_dereference_raw(p->ary[(id >> n) & IDR_MASK]);
 }
        //最后在最底层idr_layer结构的ary数组中找到相应指针。
 return((void *)p);
}
EXPORT_SYMBOL(idr_find);

idr_get_next
//得到id大于等于*nextidp的对象
void *idr_get_next(struct idr *idp, int *nextidp)
{
	struct idr_layer *p, *pa[MAX_IDR_LEVEL + 1];
	struct idr_layer **paa = &pa[0];
	int id = *nextidp;
	int n, max;

	/* find first ent */
	p = *paa = rcu_dereference_raw(idp->top);
	if (!p)
		return NULL;
	n = (p->layer + 1) * IDR_BITS;
	max = idr_max(p->layer + 1);

	while (id >= 0 && id <= max) {
		p = *paa;
		while (n > 0 && p) {
			n -= IDR_BITS;
			p = rcu_dereference_raw(p->ary[(id >> n) & IDR_MASK]);
			*++paa = p;
		}

		if (p) {
			*nextidp = id;
			return p;
		}

		/*
		 * Proceed to the next layer at the current level.  Unlike
		 * idr_for_each(), @id isn't guaranteed to be aligned to
		 * layer boundary at this point and adding 1 << n may
		 * incorrectly skip IDs.  Make sure we jump to the
		 * beginning of the next layer using round_up().
		 */
		id = round_up(id + 1, 1 << n);
		while (n < fls(id)) {
			n += IDR_BITS;
			--paa;
		}
	}
	return NULL;
}
EXPORT_SYMBOL(idr_get_next);

idr_remove
void idr_remove(struct idr *idp, int id)
{
 sub_remove(idp, (idp->layers - 1) * IDR_BITS, id);
 if (idp->top && idp->top->count == 1 && (idp->layers > 1) &&
     idp->top->ary[0]) {
 }
 while (idp->id_free_cnt >= IDR_FREE_MAX) {
 }
 return;
}

static void sub_remove(struct idr *idp, int shift, int id)
{
 struct idr_layer *p = idp->top;
 struct idr_layer **pa[MAX_LEVEL];
 struct idr_layer ***paa = &pa[0];
 struct idr_layer *to_free;
 int n;

 *paa = NULL;
 *++paa = &idp->top;

 while ((shift > 0) && p) {
  n = (id >> shift) & IDR_MASK;
  __clear_bit(n, &p->bitmap);
  *++paa = &p->ary[n];
  p = p->ary[n];
  shift -= IDR_BITS;
 }
 n = id & IDR_MASK;
 if (likely(p != NULL && test_bit(n, &p->bitmap))){
  __clear_bit(n, &p->bitmap);
  rcu_assign_pointer(p->ary[n], NULL);
  to_free = NULL;
                //pa里保存的是一条路径，如果需要的话将其释放。
  while(*paa && ! --((**paa)->count)){
   if (to_free)
    free_layer(to_free);
   to_free = **paa;
   **paa-- = NULL;
  }
  if (!*paa)
   idp->layers = 0;
  if (to_free)
   free_layer(to_free);
 } else
  idr_remove_warning(id);
}


idr_for_each
int idr_for_each(struct idr *idp,
   int (*fn)(int id, void *p, void *data), void *data)
{
 n = idp->layers * IDR_BITS;
 p = rcu_dereference_raw(idp->top);
 max = 1 << n;
        //*nextidp ＝＝ 0的idr_get_next
 id = 0;
 while (id < max) {
  while (n > 0 && p) {
   n -= IDR_BITS;
   *paa++ = p;
   p = rcu_dereference_raw(p->ary[(id >> n) & IDR_MASK]);
  }

  if (p) {
   error = fn(id, (void *)p, data);
   if (error)
    break;
  }

  id += 1 << n;
  while (n < fls(id)) {
   n += IDR_BITS;
   p = *--paa;
  }
 }

 return error;
}

-------------------------------------------------
ida

IDA - IDR based id allocator, use when translation from id to pointer isn't necessary.
ida只是用来分配id，并不将某数据结构和id连接起来，下面来自idr.h：

#define IDA_CHUNK_SIZE  128 /* 128 bytes per chunk */
#define IDA_BITMAP_LONGS (IDA_CHUNK_SIZE / sizeof(long) - 1)
#define IDA_BITMAP_BITS  (IDA_BITMAP_LONGS * sizeof(long) * 8)

struct ida_bitmap {
 long   nr_busy;
 unsigned long  bitmap[IDA_BITMAP_LONGS];
};

struct ida {
 struct idr  idr;
 struct ida_bitmap *free_bitmap;
};

#define IDA_INIT(name)  { .idr = IDR_INIT(name), .free_bitmap = NULL, }
#define DEFINE_IDA(name) struct ida name = IDA_INIT(name)

int ida_pre_get(struct ida *ida, gfp_t gfp_mask);
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id);
int ida_get_new(struct ida *ida, int *p_id);
void ida_remove(struct ida *ida, int id);
void ida_destroy(struct ida *ida);
void ida_init(struct ida *ida);

int ida_simple_get(struct ida *ida, unsigned int start, unsigned int end,
     gfp_t gfp_mask);
void ida_simple_remove(struct ida *ida, unsigned int id);

void __init idr_init_cache(void);

ida基于idr实现，其idr的底层idr_layer结构（slot）中保存的是ida_bitmap结构，ida_bitmap是
IDA_BITMAP_LONGS个long组成的位图，每个位图表示IDA_BITMAP_BITS个位。nr_busy表示这个位图
里使用了多少位。free_bitmap是在ida_pre_get分配的，供后面需要分配idr slot时使用。
这样，ida的id的计算就要看在哪个idr slot上和在当前slot的位图中的偏移：
id = idr_id * IDA_BITMAP_BITS + t;

ida_get_new_above：
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id)
{
 restart:
 /* get vacant slot */
 t = idr_get_empty_slot(&ida->idr, idr_id, pa);

 /* if bitmap isn't there, create a new one */
 bitmap = (void *)pa[0]->ary[idr_id & IDR_MASK];
 if (!bitmap) {
  bitmap = ida->free_bitmap;
  ida->free_bitmap = NULL;

  memset(bitmap, 0, sizeof(struct ida_bitmap));
                //把位图放到分配到的slot中
  rcu_assign_pointer(pa[0]->ary[idr_id & IDR_MASK],(void *)bitmap);
  pa[0]->count++;
 }

 /* lookup for empty slot */
 t = find_next_zero_bit(bitmap->bitmap, IDA_BITMAP_BITS, offset);

 id = idr_id * IDA_BITMAP_BITS + t;
 if (id >= MAX_ID_BIT)
  return -ENOSPC;

 __set_bit(t, bitmap->bitmap);
        //如果位图已满
 if (++bitmap->nr_busy == IDA_BITMAP_BITS)
  idr_mark_full(pa, idr_id);
        //返回ida id
 *p_id = id;
}
